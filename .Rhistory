q()
library(readr)
original_df <- read_csv("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject/Data/FullDataset.csv")
View(original_df)
library(readr)
pivoted_df <- read_csv("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject/Data/PivotedDataset.csv")
View(pivoted_df)
library(tidyverse)
library(readr)
pivoted_df <- read_csv("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject/Data/PivotedDataset.csv")
original_df <- read_csv("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject/Data/FullDataset.csv")
View(original_df)
View(pivoted_df)
head(original_df)
head(pivoted_df)
lm(data=original_df, formula=length~*)
lm(data=original_df, formula=length ~ *)
lm(data=original_df, formula=length ~ .)
model = lm(data=original_df, formula=length ~ .)
summary(model)$adj.r.squared
model = lm(data=original_df, formula=length ~ .)
summary(model)$adj.r.squared
p_model = lm(data=pivoted_df, formula=length~.)
summary(p_model)$adj.r.squared
model = lm(data=original_df, formula=length ~ .)
p_model = lm(data=pivoted_df, formula=length~.)
summary(model)
summary(p_model)
model = lm(data=pivoted_df, formula=length~.)
summary(model)
test = pivoted_df[0,]
test = pivoted_df[1,]
test = pivoted_df[1,][-1,]
test = pivoted_df[1,][-c(1)]
answer =pivoted_df[1,][1]
answer = unnest(pivoted_df[1,][1])
answer = as.numeric(pivoted_df[1,][1])
predict(model, test)
library(tidyverse)
library(readr)
pivoted_df <- read_csv("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject/Data/PivotedDataset.csv")
original_df <- read_csv("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject/Data/FullDataset.csv")
head(original_df)
head(pivoted_df)
model = lm(data=pivoted_df, formula=length~.)
summary(model)
test = pivoted_df[1,]
answer = as.numeric(pivoted_df[1,][1])
predict(model, test)
library(tidymodels)
library(rlang)
install.packages("rlang")
install.packages("rlang", lib="C:/Program Files/R/R-4.2.2/library")
library(tidyverse)
library(readr)
library(tidymodels)
# vowel_df <- read_csv("Data/VowelPivotedDataset.csv")
# original_df <- read_csv("Data/FullDataset.csv")
clean_df <- read_csv("Data/CleanDataset.csv")
setwd("~/MyDirectory/МИСиС/3й курс/Статистика/CourseProject")
library(tidyverse)
library(readr)
library(tidymodels)
# vowel_df <- read_csv("Data/VowelPivotedDataset.csv")
# original_df <- read_csv("Data/FullDataset.csv")
clean_df <- read_csv("Data/CleanDataset.csv")
# clean_df = clean_df %>%
#   mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
split <- initial_split(clean_df, prop = 0.9, strata = end)
train <- split %>%
training()
test <- split %>%
testing()
# Train a logistic regression model
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(y ~ ., data = train)
library(glmnet)
library(nnet, lib.loc = "C:/Program Files/R/R-4.2.2/library")
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("nnet") %>%
set_mode("classification") %>%
fit(y ~ ., data = train)
# Train a logistic regression model
show_engines('logistic_reg')
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(y ~ ., data = train)
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
# clean_df = clean_df %>%
#   mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
clean_df = clean_df %>%
mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
View(train)
train <- split %>%
training() %>%
mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
test <- split %>%
testing() %>%
mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
View(test)
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
# Model summary
tidy(model)
pred_class <- predict(model,
new_data = test,
type = "class")
# Class Probabilities
pred_proba <- predict(model,
new_data = test,
type = "prob")
results <- test %>%
select(y) %>%
bind_cols(pred_class, pred_proba)
results <- test %>%
select(end) %>%
bind_cols(pred_class, pred_proba)
accuracy(results, truth = end, estimate = .pred_class)
# Define the logistic regression model with penalty and mixture hyperparameters
log_reg <- logistic_reg(mixture = tune(), penalty = tune(), engine = "glm")
# Define the grid search for the hyperparameters
grid <- grid_regular(mixture(), penalty(), levels = c(mixture = 4, penalty = 3))
# Define the workflow for the model
log_reg_wf <- workflow() %>%
add_model(log_reg) %>%
add_formula(end ~ .)
# Define the resampling method for the grid search
folds <- vfold_cv(train, v = 5)
# Tune the hyperparameters using the grid search
log_reg_tuned <- tune_grid(
log_reg_wf,
resamples = folds,
grid = grid,
control = control_grid(save_pred = TRUE)
)
log_reg <- logistic_reg(mixture = tune(), penalty = tune(), engine = "glmnet")
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
rlang::last_trace()
# Train a logistic regression model
install.packages("glmnet", repos = "http://cran.us.r-project.org")
library(glmnet)
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
# Model summary
tidy(model)
log_reg <- logistic_reg(mixture = tune(), penalty = tune(), engine = "glmnet")
# Define the grid search for the hyperparameters
grid <- grid_regular(mixture(), penalty(), levels = c(mixture = 4, penalty = 3))
# Define the workflow for the model
log_reg_wf <- workflow() %>%
add_model(log_reg) %>%
add_formula(end ~ .)
# Define the resampling method for the grid search
folds <- vfold_cv(train, v = 5)
# Tune the hyperparameters using the grid search
log_reg_tuned <- tune_grid(
log_reg_wf,
resamples = folds,
grid = grid,
control = control_grid(save_pred = TRUE)
)
select_best(log_reg_tuned, metric = "roc_auc")
model <- logistic_reg(mixture = double(1), penalty = double(0.0000000001)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
model <- logistic_reg(mixture = double(1), penalty = 0.0000000001) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
tidy(model)
# Class Predictions
pred_class <- predict(model,
new_data = test,
type = "class")
# Class Probabilities
pred_proba <- predict(model,
new_data = test,
type = "prob")
results <- test %>%
select(end) %>%
bind_cols(pred_class, pred_proba)
accuracy(results, truth = end, estimate = .pred_class)
library(tidyverse)
library(readr)
library(tidymodels)
library(glmnet)
# vowel_df <- read_csv("Data/VowelPivotedDataset.csv")
# original_df <- read_csv("Data/FullDataset.csv")
clean_df <- read_csv("Data/CleanDataset.csv")
clean_df = clean_df %>%
mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
split <- initial_split(clean_df, prop = 0.9, strata = end)
train <- split %>%
training() %>%
mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
test <- split %>%
testing() %>%
mutate_at(vars(vowel, syl, end, closed, rhymes), factor)
# Define the logistic regression model with penalty and mixture hyperparameters
log_reg <- logistic_reg(mixture = tune(), penalty = tune(), engine = "glmnet")
# Define the grid search for the hyperparameters
grid <- grid_regular(mixture(), penalty(), levels = c(mixture = 4, penalty = 3))
# Define the workflow for the model
log_reg_wf <- workflow() %>%
add_model(log_reg) %>%
add_formula(end ~ .)
# Define the resampling method for the grid search
folds <- vfold_cv(train, v = 5)
# Tune the hyperparameters using the grid search
log_reg_tuned <- tune_grid(
log_reg_wf,
resamples = folds,
grid = grid,
control = control_grid(save_pred = TRUE)
)
select_best(log_reg_tuned, metric = "roc_auc")
# Train a logistic regression model
model <- logistic_reg(mixture = double(1), penalty = 0.0000000001) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(end ~ ., data = train)
# Model summary
tidy(model)
# Class Predictions
pred_class <- predict(model,
new_data = test,
type = "class")
# Class Probabilities
pred_proba <- predict(model,
new_data = test,
type = "prob")
results <- test %>%
select(end) %>%
bind_cols(pred_class, pred_proba)
accuracy(results, truth = end, estimate = .pred_class)
